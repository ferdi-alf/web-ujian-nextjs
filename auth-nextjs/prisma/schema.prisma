generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String       @id @default(cuid())
  username        String?      @unique
  image           String?
  role            Role         @default(SISWA)
  password        String?
  status          UserStatus   @default(OFFLINE)
  lastLogin       DateTime?
  loginCount      Int          @default(0)
  lastLoginAt     DateTime?
  accounts        Account[]
  sessions        Session[]
  siswaDetail     SiswaDetail?
  loginLogs       LoginLog[]
  proktorDetail   ProktorDetail?

  @@map("users")
}

model BiodataSekolah {
  id String @id @default(cuid())
  namaSekolah String?
  kepalaSekolah String?
  NipKepalaSekolah String?
  alamat String?
  @@map("biodata_sekolah")
}

model ProktorDetail {
  id     String @id @default(cuid())
  userId String @unique
  jurusan         String?
  Nip            String?
  name           String?
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("proktor_detail")
}

// Tambahkan enum untuk status
enum UserStatus {
  OFFLINE
  ONLINE
  UJIAN
  SELESAI_UJIAN
}


model LoginLog {
  id        String   @id @default(uuid())  
  userId    String  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  loginDate DateTime @default(now())  
}



model Kelas {
  id          String        @id @default(cuid())
  tingkat     Tingkat
  jurusan     String?
  siswaDetail SiswaDetail[]

  @@map("kelas")
}



model Soal {
  id              String        @id @default(cuid())
  gambar          String?
  soal            String
  mataPelajaranId String
  Jawaban         Jawaban[]
  mataPelajaran   MataPelajaran @relation(fields: [mataPelajaranId], references: [id], onDelete: Cascade)

  @@map("soal")
}

model Jawaban {
  id      String  @id @default(cuid())
  soalId  String
  jawaban String
  benar   Boolean
  soal    Soal    @relation(fields: [soalId], references: [id], onDelete: Cascade)

  @@map("jawaban")
}


enum Tingkat {
  X
  XI
  XII
}

model Jadwal {
  id        String   @id @default(cuid())
  tanggal   DateTime
  tingkat   Tingkat
  sesi      Sesi[]   // satu jadwal bisa punya banyak sesi

  @@map("jadwal")
}

model Sesi {
  id             String    @id @default(cuid())
  sesi           Int       // misal 1, 2, dst
  jamMulai   String?   // ‚Üê jadikan nullable
  jamSelesai String?
  jadwalId       String
  jadwal         Jadwal    @relation(fields: [jadwalId], references: [id], onDelete: Cascade)
  ujian          Ujian[]   @relation("SesiUjian")


  @@map("sesi")
}

model Ujian {
  id              String        @id @default(cuid())
  mataPelajaranId String
  token           String?       @unique
  waktuPengerjaan Int?
  jamMulai  String?
  jamSelesai String?
  status          Status        @default(pending)
  sesiId          String?        // optional
  sesi            Sesi?          @relation("SesiUjian", fields: [sesiId], references: [id], onDelete: SetNull)
  hasil           Hasil[]
  kecurangan      Kecurangan[]
  mataPelajaran   MataPelajaran @relation(fields: [mataPelajaranId], references: [id], onDelete: Cascade)
  JawabanSiswa JawabanSiswa[]

  @@map("ujian")
}
model MataPelajaran {
  id        String  @id @default(cuid())
  tingkat   Tingkat
  pelajaran String
  soal      Soal[]
  ujian     Ujian[]

  @@map("mata_pelajaran")
}
model Hasil {
  id              String      @id @default(cuid())
  siswaDetailId   String
  ujianId         String
  waktuPengerjaan String
  nilai           String
  benar           String
  salah           String
  createdAt       DateTime    @default(now())
  siswaDetail     SiswaDetail @relation(fields: [siswaDetailId], references: [id], onDelete: Cascade)
  ujian           Ujian       @relation(fields: [ujianId], references: [id], onDelete: Cascade)

  @@unique([siswaDetailId, ujianId])
  @@map("hasil")
}
model Kecurangan {
  id            String         @id @default(cuid())
  ujianId       String
  siswaDetailId String?
  type          TypeKecurangan
  siswaDetail   SiswaDetail?   @relation(fields: [siswaDetailId], references: [id], onDelete: Cascade)
  ujian         Ujian          @relation(fields: [ujianId], references: [id], onDelete: Cascade)

  @@map("kecurangan")
}
model SiswaDetail {
  id          String       @id @default(cuid())
  userId      String       @unique
  name        String
  kelasId     String
  status      String       @default("AKTIF")
  kelamin     Kelamin
  nis         String
  nomor_ujian String
  ruang       String
  hasil       Hasil[]
  kecurangan  Kecurangan[]
  kelas       Kelas        @relation(fields: [kelasId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  JawabanSiswa JawabanSiswa[]

  @@map("siswa_detail")
}

model JawabanSiswa {
  id            String      @id @default(cuid())
  siswaDetailId String
  ujianId       String
  soalId        String
  jawabanId     String
  createdAt     DateTime    @default(now())
  siswaDetail   SiswaDetail @relation(fields: [siswaDetailId], references: [id], onDelete: Cascade)
  ujian         Ujian       @relation(fields: [ujianId], references: [id], onDelete: Cascade)

  @@map("jawaban_siswa")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  SISWA
  PROKTOR
  ADMIN
  SUPERADMIN
}

enum Kelamin {
  L
  P
}



enum Status {
  pending
  active
  selesai
}

enum TypeKecurangan {
  blurred
  tabHidden
  floatingWindow
  splitScreen
}
